import urllib.parse
import webbrowser
import os
from typing import Optional

class WhatsAppIntegration:
    def __init__(self):
        self.whatsapp_web_url = "https://web.whatsapp.com/send"
        self.whatsapp_api_url = "https://api.whatsapp.com/send"
    
    def generate_whatsapp_link(self, phone_number: str, message: str, use_web: bool = True) -> str:
        """Generate WhatsApp sharing link"""
        
        # Clean phone number (remove spaces, dashes, etc.)
        clean_phone = ''.join(filter(str.isdigit, phone_number))
        
        # Add country code if not present (assuming +91 for India as default)
        if not clean_phone.startswith('91') and len(clean_phone) == 10:
            clean_phone = '91' + clean_phone
        
        # URL encode the message
        encoded_message = urllib.parse.quote(message)
        
        # Choose URL based on preference
        base_url = self.whatsapp_web_url if use_web else self.whatsapp_api_url
        
        # Construct the URL
        url = f"{base_url}?phone={clean_phone}&text={encoded_message}"
        
        return url
    
    def create_report_message(self, patient_name: str, diagnosis: str, report_filename: str) -> str:
        """Create a formatted message for WhatsApp sharing"""
        
        message = f"""🩺 HEARTEST Medical Report

👤 Patient: {patient_name}
📋 Diagnosis: {diagnosis}
📄 Report: {report_filename}

Generated by HEARTEST - Giri's AI PCG Analyzer
Advanced AI-powered phonocardiography analysis

⚠️ This report is for medical reference only. Please consult your healthcare provider for proper medical evaluation.

#HEARTEST #PCGAnalysis #HeartHealth"""
        
        return message
    
    def share_report_via_whatsapp(self, 
                                 phone_number: str, 
                                 patient_name: str, 
                                 diagnosis: str, 
                                 report_path: str,
                                 open_browser: bool = True) -> str:
        """Share medical report via WhatsApp"""
        
        # Get the report filename
        report_filename = os.path.basename(report_path)
        
        # Create the message
        message = self.create_report_message(patient_name, diagnosis, report_filename)
        
        # Generate WhatsApp link
        whatsapp_url = self.generate_whatsapp_link(phone_number, message)
        
        # Open in browser if requested
        if open_browser:
            try:
                webbrowser.open(whatsapp_url)
                return "WhatsApp opened successfully"
            except Exception as e:
                return f"Error opening WhatsApp: {str(e)}"
        
        return whatsapp_url
    
    def create_appointment_reminder_message(self, 
                                          patient_name: str, 
                                          follow_up_date: str,
                                          doctor_name: str = "your healthcare provider") -> str:
        """Create follow-up appointment reminder message"""
        
        message = f"""🏥 HEARTEST Follow-up Reminder

👤 Dear {patient_name},

📅 Follow-up Date: {follow_up_date}
👩‍⚕️ Doctor: {doctor_name}

Your recent PCG analysis suggests a follow-up appointment. Please schedule your visit accordingly.

📱 For any questions, contact your healthcare provider.

Generated by HEARTEST - Giri's AI PCG Analyzer

#FollowUp #HeartHealth #HEARTEST"""
        
        return message
    
    def share_follow_up_reminder(self, 
                               phone_number: str,
                               patient_name: str, 
                               follow_up_date: str,
                               doctor_name: str = "your healthcare provider",
                               open_browser: bool = True) -> str:
        """Share follow-up reminder via WhatsApp"""
        
        # Create the reminder message
        message = self.create_appointment_reminder_message(patient_name, follow_up_date, doctor_name)
        
        # Generate WhatsApp link
        whatsapp_url = self.generate_whatsapp_link(phone_number, message)
        
        # Open in browser if requested
        if open_browser:
            try:
                webbrowser.open(whatsapp_url)
                return "WhatsApp reminder sent successfully"
            except Exception as e:
                return f"Error sending reminder: {str(e)}"
        
        return whatsapp_url
    
    def validate_phone_number(self, phone_number: str) -> tuple[bool, str]:
        """Validate phone number format"""
        
        # Clean phone number
        clean_phone = ''.join(filter(str.isdigit, phone_number))
        
        if not clean_phone:
            return False, "Phone number cannot be empty"
        
        if len(clean_phone) < 10:
            return False, "Phone number too short"
        
        if len(clean_phone) > 15:
            return False, "Phone number too long"
        
        # Check for valid Indian mobile number patterns
        if len(clean_phone) == 10:
            if clean_phone[0] in ['6', '7', '8', '9']:
                return True, f"+91{clean_phone}"
            else:
                return False, "Invalid Indian mobile number"
        
        if len(clean_phone) == 12 and clean_phone.startswith('91'):
            if clean_phone[2] in ['6', '7', '8', '9']:
                return True, f"+{clean_phone}"
            else:
                return False, "Invalid Indian mobile number"
        
        # For international numbers
        return True, f"+{clean_phone}"

# Global WhatsApp integration instance
whatsapp = WhatsAppIntegration()